upstream app {
        server localhost:1323;
        # nginxとappが同じサーバのときはunix domein socketを使う
        # server unix:/tmp/server.sock;

        # ngixnとapp間のkeep-alive設定
        # デフォルトだと小さいので、設定する。
        keepalive 100;
}

server {
        root /home/isucon/isucon10-qualify/webapp/public;
        listen 80 backlog=4096 reuseport default_server;
        listen [::]:80 default_server;

        gzip on;
        gzip_proxied any;
        gzip_min_length 1000;
        gzip_vary on;
        # gzipに圧縮するMIMEタイプ
        gzip_types text/css text/javascript application/javascript application/x-javascript application/json;
        # クライアントがgzipに非対応な場合は展開する
        gunzip on;
        # 圧縮済みの静的ファイルが存在する場合はそれを返す
        #gzip_static always;
        gzip_static on;
        # クライアントから受け付ける最大のリクエストボディサイズ
        client_max_body_size 1024m;

        set $block_user_agent 0;
        if ($http_user_agent ~ "ISUCONbot(-Mobile)?") {
                set $block_user_agent 1;
        }
        if ($http_user_agent ~ "ISUCONbot-Image\/") {
                set $block_user_agent 1;
        }
        if ($http_user_agent ~ "Mediapartners-ISUCON") {
                set $block_user_agent 1;
        }
        if ($http_user_agent ~ "ISUCONCoffee") {
                set $block_user_agent 1;
        }
        if ($http_user_agent ~ "ISUCONFeedSeeker(Beta)?") {
                set $block_user_agent 1;
        }
        if ($http_user_agent ~ "crawler \(https:\/\/isucon\.invalid\/(support\/faq\/|help\/jp\/)") {
                set $block_user_agent 1;
        }
        if ($http_user_agent ~ "isubot") {
                set $block_user_agent 1;
        }
        if ($http_user_agent ~ "Isupider") {
                set $block_user_agent 1;
        }
        if ($http_user_agent ~ "Isupider(-image)?\+") {
                set $block_user_agent 1;
        }
        if ($http_user_agent ~* "(bot|crawler|spider)(?:[-_ .\/;@()]|$)") {
                set $block_user_agent 1;
        }
        if ($block_user_agent) {
                return 503;
        }

        location /api {
                 # バッファ設定
                proxy_buffering on;
                proxy_buffers 16 128k;
                proxy_busy_buffers_size 128k;
                proxy_connect_timeout 4;
                proxy_send_timeout 4;
                proxy_read_timeout 30;

                proxy_set_header Host $host;
                proxy_http_version 1.1;
                proxy_set_header Connection "";
                proxy_pass http://app;
        }

        location /initialize {
                proxy_pass http://app;
        }

        location / {
                root /www/data;
        }
}